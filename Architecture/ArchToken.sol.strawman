import {AccessControl} from "@openzeppelin/contracts/access/AccessControl.sol";
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

import {IDetailedERC20} from "./interfaces/IDetailedERC20.sol";

/// @title ARCH token
///
/// @dev This is the governence token
///
///
contract ArchToken is AccessControl, ERC20("Archimedes ARCH Token", "ARCH") {
  using SafeERC20 for ERC20;

  /* Privileged functions: Governor  */
  // TBD: Which role mints ARCH token
  // Also, make sure privilaged functions comply with out scheme

  /// @dev Mints tokens to a recipient.
  ///
  /// This function reverts if the caller does not have the minter role.
  ///
  /// @param _recipient the account to mint tokens to.
  /// @param _amount    the amount of tokens to mint.
  function mint(address _recipient, uint256 _amount) external ;

  /// @dev burns tokens of the caller
  ///
  /// @param amount to burn
  function burn(uint256 amount) public virtual {
        _burn(_msgSender(), amount);
  }
}



/*

Probably at after MVP we'll introduce some kind of a staking pool
 Check https://github.com/alchemix-finance/alchemix-protocol/blob/2099ed3b81e8727289fc11994b4389ea118577a2/contracts/StakingPools.sol
 Do we need another contract for staking pool
 In addition to https://github.com/alchemix-finance/alchemix-protocol/blob/2099ed3b81e8727289fc11994b4389ea118577a2/contracts/AlchemixToken.sol
*/
