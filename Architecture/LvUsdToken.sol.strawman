import {AccessControl} from "@openzeppelin/contracts/access/AccessControl.sol";
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

import {IDetailedERC20} from "./interfaces/IDetailedERC20.sol";

/// @title lvUSD token
///
/// @dev This is the contract for the Archimedes lvUSD USD pegged stablecoin
///
/// Not implementation just external facing interfaces
///
contract LvUsdToken is AccessControl, ERC20("Archimedes lvUSD", "lvUSD") {
  using SafeERC20 for ERC20;


  /// This function reverts if the caller does not have the admin role.
  ///
  /// @param _toWhitelist the account to mint tokens to.
  /// @param _state the whitelist state.
  function setWhitelist(address _toWhitelist, bool _state) external onlyAdmin ;

  /// @dev Mints tokens to a recipient.
  ///
  /// This function reverts if the caller does not have the minter role.
  ///
  /// @param _recipient the account to mint tokens to.
  /// @param _amount    the amount of tokens to mint.
  function mint(address _recipient, uint256 _amount) external onlyWhitelisted ;


  /// @dev burns tokens of the caller
  ///
  /// @param amount to burn
  function burn(uint256 amount) public virtual {
        _burn(_msgSender(), amount);
    }


  /// @dev Sets the address of the current minter contract
  /// Timelocked function (set cadidate and change owner after 17,280 blocks ~3 days)
  /// Emits MinterSet
  ///
  ///
  /// @param account the accounts to set.
  function setMinter(address[] calldata accounts) external onlyAdmin ;

}
