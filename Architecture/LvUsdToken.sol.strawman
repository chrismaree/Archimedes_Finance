//import {AccessControl} from "@openzeppelin/contracts/access/AccessControl.sol";
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import "@openzeppelin/contracts/access/Roles.sol";

//import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

import {IDetailedERC20} from "./interfaces/IDetailedERC20.sol";

/// @title lvUSD token
///
/// @dev This is the contract for the Archimedes lvUSD USD pegged stablecoin
///
/// Not implementation just external facing interfaces
///
contract LvUsdToken is AccessControl, ERC20("Archimedes lvUSD", "lvUSD") {
  using SafeERC20 for ERC20;
  using Roles for Roles.Role;

   

  ///  We need to keep in mind this role. It is baked into ERC20 
  ///  setExecutive need to call setMinter
  ///  Called by Admin (AccessControlAdmin)
  ///  function setMinter(address[] calldata accounts) external onlyAdmin ;


   /* Privileged functions: Executive  */

  /// @dev Mints tokens to a recipient.
  ///
  /// This function reverts if the caller does not have the minter role.
  ///
  /// @param _recipient the account to mint tokens to.
  /// @param _amount    the amount of tokens to mint.
  function mint(address _recipient, uint256 _amount) external onlyMinter ;


  
}
